---
import { formatDate } from '../utils/feedAggregator';

interface Props {
  title: string;
  description: string;
  link: string;
  date: Date | string;
  source: string;
}

const { title, description, link, date, source } = Astro.props;

// Format description - truncate if too long
const truncatedDescription = description && description.length > 150 
  ? `${description.substring(0, 150)}...` 
  : description;

// Format date for display
const formattedDate = formatDate(date);

// Calculate time ago
const getTimeAgo = (dateValue: Date | string) => {
  try {
    const date = typeof dateValue === 'string' ? new Date(dateValue) : dateValue;
    
    if (!(date instanceof Date) || isNaN(date.getTime())) {
      return '';
    }
    
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffSec = Math.floor(diffMs / 1000);
    const diffMin = Math.floor(diffSec / 60);
    const diffHour = Math.floor(diffMin / 60);
    const diffDay = Math.floor(diffHour / 24);
    
    if (diffDay > 30) {
      return '';
    } else if (diffDay > 0) {
      return `${diffDay}d ago`;
    } else if (diffHour > 0) {
      return `${diffHour}h ago`;
    } else if (diffMin > 0) {
      return `${diffMin}m ago`;
    } else {
      return 'just now';
    }
  } catch (e) {
    console.error('Error calculating time ago:', e);
    return '';
  }
};

const timeAgo = getTimeAgo(date);
---

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 overflow-hidden h-full flex flex-col">
  <div class="p-5 flex-grow">
    <div class="flex justify-between items-start mb-3">
      <span class="text-sm font-medium text-purple-600 dark:text-purple-400">{source}</span>
      <div class="text-xs text-gray-500 dark:text-gray-400 flex flex-col items-end">
        <span>{formattedDate}</span>
        {timeAgo && <span class="mt-0.5">{timeAgo}</span>}
      </div>
    </div>
    
    <h3 class="text-lg font-bold mb-2 text-gray-800 dark:text-gray-100">
      <a href={link} target="_blank" rel="noopener noreferrer" class="hover:text-purple-700 dark:hover:text-purple-300 transition-colors">
        {title}
      </a>
    </h3>
    
    <p class="text-gray-600 dark:text-gray-300 text-sm mb-4">
      {truncatedDescription || "No description available"}
    </p>
  </div>
  
  <div class="px-5 pb-5 mt-auto">
    <a 
      href={link} 
      target="_blank" 
      rel="noopener noreferrer" 
      class="text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-300 text-sm font-medium flex items-center"
    >
      Read more
      <svg xmlns="http://www.w3.org/2000/svg" class="ml-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
      </svg>
    </a>
  </div>
</div>
