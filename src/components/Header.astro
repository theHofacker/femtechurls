---
import GlobalSearch from './GlobalSearch.astro';

interface Props {
  title?: string;
}

const { title = "FemTechURLs" } = Astro.props;
---

<header class="bg-purple-800 text-white shadow h-16">
  <div class="max-w-7xl mx-auto h-full px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-full">
      <div class="flex items-center">
        <button 
          class="md:hidden p-2 rounded-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-400"
          id="mobileSidebarToggle"
          aria-label="Toggle Mobile Menu"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
        <h1 class="text-xl font-bold ml-4 md:ml-0 truncate max-w-[140px] sm:max-w-xs">{title}</h1>
      </div>

      <div class="flex-1 max-w-lg mx-4 md:mx-8 hidden md:block">
        <GlobalSearch />
      </div>

      <div class="flex items-center space-x-3">
        <button 
          id="mobile-search-button"
          class="md:hidden p-2 rounded-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-400"
          aria-label="Toggle Search"
        >
          <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </button>
        
        <button 
          id="customize-button"
          class="px-3 py-2 flex items-center space-x-1 bg-purple-700 text-white rounded-lg hover:bg-purple-600 transition-colors focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-purple-800"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4" />
          </svg>
          <span class="hidden sm:inline">Customize</span>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile Search Overlay -->
  <!-- Replace your existing mobile search overlay with this improved version -->
<div
  id="mobile-search-overlay"
  class="fixed inset-0 bg-purple-900 bg-opacity-50 z-50 hidden md:hidden"
>
  <div class="p-4 bg-purple-800">
    <div class="relative flex items-center">
      <!-- Explicit form with correct action and method -->
      <form action="/search" method="get" class="flex-1">
        <div class="relative">
          <input
            type="search"
            id="mobile-search-input"
            name="q"
            placeholder="Search all content..."
            class="w-full pl-10 pr-4 py-2 rounded-lg bg-white text-gray-800 placeholder-gray-500 border border-purple-600 focus:outline-none focus:ring-2 focus:ring-white focus:border-transparent"
          />
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="h-5 w-5 text-purple-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
            </svg>
          </div>
          <!-- Add an explicit submit button that's accessible but visually hidden -->
          <button type="submit" class="sr-only">Search</button>
        </div>
      </form>
      <button
        id="close-mobile-search"
        class="ml-3 p-2 text-white hover:bg-purple-700 rounded-full"
        aria-label="Close Search"
      >
        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
  </div>
</div>

<!-- Add this script to your Header.astro file, just before the closing </Header> tag -->
<script>
  // Enhanced mobile search functionality
  document.addEventListener('DOMContentLoaded', function() {
    // Mobile search functionality
    const mobileSearchButton = document.getElementById('mobile-search-button');
    const mobileSearchOverlay = document.getElementById('mobile-search-overlay');
    const closeMobileSearch = document.getElementById('close-mobile-search');
    const mobileSearchInput = document.getElementById('mobile-search-input');
    
    if (mobileSearchButton && mobileSearchOverlay) {
      mobileSearchButton.addEventListener('click', function() {
        mobileSearchOverlay.classList.remove('hidden');
        mobileSearchOverlay.classList.add('active');
        
        // Focus the input after a slight delay to ensure overlay is visible
        setTimeout(function() {
          if (mobileSearchInput) {
            mobileSearchInput.focus();
          }
        }, 100);
      });
    }
    
    if (closeMobileSearch && mobileSearchOverlay) {
      closeMobileSearch.addEventListener('click', function() {
        mobileSearchOverlay.classList.add('hidden');
        mobileSearchOverlay.classList.remove('active');
      });
    }
    
    // Add form handling for the mobile search input
    if (mobileSearchInput) {
      // Wrap in a form if not already in one
      const existingForm = mobileSearchInput.closest('form');
      
      if (!existingForm) {
        const form = document.createElement('form');
        form.setAttribute('action', '/search');
        form.setAttribute('method', 'get');
        
        // Replace the input with the form
        const parent = mobileSearchInput.parentNode;
        parent.removeChild(mobileSearchInput);
        
        // Add a name attribute to the input if it doesn't have one
        if (!mobileSearchInput.getAttribute('name')) {
          mobileSearchInput.setAttribute('name', 'q');
        }
        
        form.appendChild(mobileSearchInput);
        parent.appendChild(form);
      }
    }
  });
</script>
</header>

<script>
  // Mobile search functionality
  const mobileSearchButton = document.getElementById('mobile-search-button');
  const mobileSearchOverlay = document.getElementById('mobile-search-overlay');
  const closeMobileSearch = document.getElementById('close-mobile-search');
  
  mobileSearchButton?.addEventListener('click', () => {
    mobileSearchOverlay?.classList.remove('hidden');
    const mobileSearchInput = mobileSearchOverlay?.querySelector('input[type="search"]');
    if (mobileSearchInput instanceof HTMLInputElement) {
      mobileSearchInput.focus();
    }
  });
  
  closeMobileSearch?.addEventListener('click', () => {
    mobileSearchOverlay?.classList.add('hidden');
  });
  
  // Close mobile search on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !mobileSearchOverlay?.classList.contains('hidden')) {
      mobileSearchOverlay?.classList.add('hidden');
    }
  });
  
  // Customize button functionality
  const customizeButton = document.getElementById('customize-button');
  customizeButton?.addEventListener('click', () => {
    const customizationModal = document.getElementById('customization-modal');
    const modalBackdrop = document.getElementById('customization-modal-backdrop');
    
    if (customizationModal && modalBackdrop) {
      customizationModal.classList.remove('hidden');
      modalBackdrop.classList.remove('hidden');
      document.body.classList.add('overflow-hidden');
    }
  });
</script>

// Add this script to your Header.astro file for debugging mobile search issues

// Debug script for mobile search - uncomment when needed

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Debug mobile search functionality
    function debugMobileSearch() {
      // Get all relevant elements
      const mobileSearchButton = document.getElementById('mobile-search-button');
      const mobileSearchOverlay = document.getElementById('mobile-search-overlay');
      const mobileSearchInput = document.getElementById('mobile-search-input');
      const closeButton = document.getElementById('close-mobile-search');
      const mobileSearchForm = mobileSearchInput ? mobileSearchInput.closest('form') : null;
      
      // Log elements found
      console.log('Mobile search button found:', !!mobileSearchButton);
      console.log('Mobile search overlay found:', !!mobileSearchOverlay);
      console.log('Mobile search input found:', !!mobileSearchInput);
      console.log('Close button found:', !!closeButton);
      console.log('Mobile search form found:', !!mobileSearchForm);
      
      if (mobileSearchForm) {
        console.log('Form action:', mobileSearchForm.getAttribute('action'));
        console.log('Form method:', mobileSearchForm.getAttribute('method'));
      }
      
      if (mobileSearchInput) {
        console.log('Input name:', mobileSearchInput.getAttribute('name'));
        
        // Add event listener for input changes
        mobileSearchInput.addEventListener('input', function() {
          console.log('Mobile search input value:', this.value);
        });
        
        // Add event listener for form submission
        if (mobileSearchForm) {
          mobileSearchForm.addEventListener('submit', function(e) {
            console.log('Form submitted with value:', mobileSearchInput.value);
            
            // Uncomment to prevent submission for testing
            // e.preventDefault();
            
            // Log the URL that would be navigated to
            const searchParams = new URLSearchParams();
            searchParams.append('q', mobileSearchInput.value);
            console.log('Would navigate to:', `${mobileSearchForm.getAttribute('action')}?${searchParams.toString()}`);
          });
        }
      }
      
      // Test opening the search overlay
      if (mobileSearchButton && mobileSearchOverlay) {
        mobileSearchButton.addEventListener('click', function() {
          console.log('Mobile search button clicked');
          console.log('Overlay visible after click:', !mobileSearchOverlay.classList.contains('hidden'));
          
          // Check if input gets focused
          setTimeout(function() {
            console.log('Input focused after overlay open:', document.activeElement === mobileSearchInput);
          }, 200);
        });
      }
      
      // Test closing the search overlay
      if (closeButton && mobileSearchOverlay) {
        closeButton.addEventListener('click', function() {
          console.log('Close button clicked');
          console.log('Overlay hidden after click:', mobileSearchOverlay.classList.contains('hidden'));
        });
      }
    }
    
    // Run the debug function
    debugMobileSearch();
  });
</script>

