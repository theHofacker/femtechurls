---
// src/components/GlobalSearch.astro
---

<div class="relative">
  <input
    type="search"
    id="global-search-input"
    placeholder="Search all content..."
    class="w-full pl-10 pr-4 py-2 rounded-lg bg-purple-700 text-white placeholder-purple-300 border border-purple-600 focus:outline-none focus:ring-2 focus:ring-white focus:border-transparent"
  />
  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
    <svg class="h-5 w-5 text-purple-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
    </svg>
  </div>

  <!-- Search Results Dropdown -->
  <div id="search-results-dropdown" class="absolute z-50 w-full mt-2 bg-white rounded-md shadow-lg hidden overflow-hidden max-h-[70vh] overflow-y-auto">
    <div class="search-results-container p-2">
      <div id="search-loading" class="p-4 text-center text-gray-500 hidden">
        <svg class="w-6 h-6 mx-auto animate-spin text-purple-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <p class="mt-2">Searching...</p>
      </div>
      <div id="search-results" class="space-y-2">
        <!-- Search results will be populated here -->
      </div>
      <div id="no-results" class="p-4 text-center text-gray-500 hidden">
        <p>No results found</p>
      </div>
    </div>
  </div>
</div>

<script>
  // We'll load the search functionality only on the client side
  document.addEventListener('DOMContentLoaded', async () => {
    try {
      // Dynamically import the search module
      const { searchNews, initializeSearch } = await import('../utils/globalSearch.js');
      
      // DOM elements
      const searchInput = document.getElementById('global-search-input');
      const searchResultsDropdown = document.getElementById('search-results-dropdown');
      const searchResults = document.getElementById('search-results');
      const searchLoading = document.getElementById('search-loading');
      const noResults = document.getElementById('no-results');
      
      // Initialize search
      await initializeSearch();
      
      // Debounce function to limit API calls
      function debounce(func, timeout = 300) {
        let timer;
        return (...args) => {
          clearTimeout(timer);
          timer = setTimeout(() => { func.apply(this, args); }, timeout);
        };
      }
      
      // Display search results
      function displayResults(items) {
        if (!searchResults) return;
        
        searchResults.innerHTML = '';
        
        if (items.length === 0) {
          if (noResults) noResults.classList.remove('hidden');
          return;
        }
        
        if (noResults) noResults.classList.add('hidden');
        
        // Limit the number of results to avoid overwhelming the UI
        const displayItems = items.slice(0, 10);
        
        displayItems.forEach(item => {
          const resultElement = document.createElement('div');
          resultElement.className = 'p-3 hover:bg-gray-100 rounded cursor-pointer';
          
          // Format the date
          const date = item.date instanceof Date 
            ? item.date.toLocaleDateString() 
            : new Date(item.date).toLocaleDateString();
          
          resultElement.innerHTML = `
            <div class="flex items-start">
              <div class="flex-1 min-w-0">
                <a href="${item.link}" class="block">
                  <p class="text-sm font-medium text-gray-900 truncate">${item.title}</p>
                  <p class="text-xs text-gray-500 mt-1 truncate">${item.description || 'No description'}</p>
                  <div class="flex items-center mt-2">
                    <span class="text-xs font-medium text-purple-600">${item.sourceName}</span>
                    <span class="mx-1 text-gray-300">â€¢</span>
                    <span class="text-xs text-gray-500">${date}</span>
                  </div>
                </a>
              </div>
            </div>
          `;
          
          resultElement.addEventListener('click', () => {
            window.location.href = item.link;
          });
          
          searchResults.appendChild(resultElement);
        });
        
        // Show "View all results" link if there are more results
        if (items.length > 10) {
          const viewAllElement = document.createElement('div');
          viewAllElement.className = 'p-3 text-center border-t border-gray-200';
          viewAllElement.innerHTML = `
            <a href="/search?q=${encodeURIComponent(searchInput.value)}" class="text-sm font-medium text-purple-600 hover:text-purple-800">
              View all ${items.length} results
            </a>
          `;
          searchResults.appendChild(viewAllElement);
        }
      }
      
      // Handle search input
      const handleSearch = debounce(async (event) => {
        if (!searchInput) return;
        
        const query = searchInput.value.trim();
        
        if (query === '') {
          searchResultsDropdown?.classList.add('hidden');
          return;
        }
        
        // Show loading indicator
        searchResultsDropdown?.classList.remove('hidden');
        if (searchResults) searchResults.innerHTML = '';
        if (noResults) noResults.classList.add('hidden');
        if (searchLoading) searchLoading.classList.remove('hidden');
        
        try {
          const results = await searchNews(query);
          
          // Hide loading indicator
          if (searchLoading) searchLoading.classList.add('hidden');
          
          // Display results
          displayResults(results);
        } catch (error) {
          console.error('Error searching news:', error);
          if (searchLoading) searchLoading.classList.add('hidden');
          if (searchResults) searchResults.innerHTML = '<div class="p-4 text-center text-red-500">An error occurred while searching</div>';
        }
      }, 300);
      
      // Add event listeners
      searchInput?.addEventListener('input', handleSearch);
      
      // Close dropdown when clicking outside
      document.addEventListener('click', (event) => {
        if (searchResultsDropdown && 
            !searchResultsDropdown.contains(event.target) && 
            event.target !== searchInput) {
          searchResultsDropdown.classList.add('hidden');
        }
      });
      
      // Close dropdown on escape key
      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && searchResultsDropdown) {
          searchResultsDropdown.classList.add('hidden');
        }
      });
      
      // Initialize mobile search if it exists
      const mobileSearchInput = document.getElementById('mobile-search-input');
      if (mobileSearchInput && searchInput) {
        // Keep mobile and desktop search in sync
        mobileSearchInput.addEventListener('input', (event) => {
          searchInput.value = mobileSearchInput.value;
          handleSearch(event);
        });
        
        searchInput.addEventListener('input', (event) => {
          mobileSearchInput.value = searchInput.value;
        });
      }
    } catch (error) {
      console.error('Error initializing search:', error);
    }
  });
</script>
