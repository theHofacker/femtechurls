---
// Main navigation categories - simplified version
const mainNavItems = [
  { name: 'Home', path: '/', icon: 'M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6' }
];

// Check if path is active
const pathname = new URL(Astro.request.url).pathname;

// Helper function to check if a path is active
const isActivePath = (path: string) => {
  if (path === '/') {
    return pathname === '/';
  }
  return pathname.startsWith(path);
};
---

<div class="h-full flex flex-col py-4">
  <div class="px-4 pb-6 flex justify-between items-center border-b border-gray-200">
    <a href="/" class="text-xl font-bold text-purple-800 flex items-center overflow-hidden">
      <span class="sidebar-text">FemTechURLs</span>
    </a>
    <button 
      id="sidebarToggle"
      class="ml-2 p-1.5 rounded-md bg-purple-100 text-purple-800 hover:bg-purple-200 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"
      aria-label="Toggle Sidebar"
    >
      <svg 
        id="toggleIcon" 
        xmlns="http://www.w3.org/2000/svg" 
        class="h-5 w-5 transition-transform duration-200" 
        fill="none" 
        viewBox="0 0 24 24" 
        stroke="currentColor"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 19l-7-7 7-7m8 14l-7-7 7-7" />
      </svg>
    </button>
  </div>

  <nav class="flex-1 px-2 space-y-1 overflow-y-auto">
    <!-- Main Navigation -->
    {mainNavItems.map((item) => {
      const isActive = isActivePath(item.path);
      
      return (
        <a
          href={item.path}
          class={`flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors ${
            isActive
              ? 'bg-purple-100 text-purple-900'
              : 'text-gray-600 hover:bg-purple-50 hover:text-purple-900'
          }`}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class={`h-5 w-5 mr-3 flex-shrink-0 ${
              isActive ? 'text-purple-700' : 'text-gray-500'
            }`}
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={item.icon} />
          </svg>
          <span class="sidebar-text truncate">{item.name}</span>
        </a>
      );
    })}
  </nav>

  <div class="px-4 pt-4 border-t border-gray-200 mt-auto">
    <p class="text-xs text-gray-500 sidebar-text">
      Last updated: {new Date().toLocaleDateString()}
    </p>
  </div>
</div>

<style>
  nav {
    scrollbar-width: thin;
    scrollbar-color: theme('colors.purple.200') theme('colors.purple.50');
  }

  nav::-webkit-scrollbar {
    width: 6px;
  }

  nav::-webkit-scrollbar-track {
    background: theme('colors.purple.50');
  }

  nav::-webkit-scrollbar-thumb {
    background-color: theme('colors.purple.200');
    border-radius: 3px;
  }
</style>

<script>
  const sidebarToggle = document.getElementById('sidebarToggle');
  const toggleIcon = document.getElementById('toggleIcon');
  const sidebarTexts = document.querySelectorAll('.sidebar-text');
  const sidebar = document.getElementById('sidebar');
  
  let isCollapsed = false;
  
  const updateSidebarState = () => {
    sidebarTexts.forEach(text => {
      if (isCollapsed) {
        text.classList.add('hidden');
      } else {
        text.classList.remove('hidden');
      }
    });
    
    toggleIcon?.classList.toggle('rotate-180', isCollapsed);
    
    if (sidebar) {
      if (isCollapsed) {
        sidebar.classList.remove('w-64');
        sidebar.classList.add('w-16');
      } else {
        sidebar.classList.remove('w-16');
        sidebar.classList.add('w-64');
      }
    }
  };

  sidebarToggle?.addEventListener('click', () => {
    isCollapsed = !isCollapsed;
    updateSidebarState();
    
    // Save the sidebar state in localStorage
    localStorage.setItem('sidebarCollapsed', String(isCollapsed));
  });

  // Restore sidebar state from localStorage on page load
  document.addEventListener('DOMContentLoaded', () => {
    const savedState = localStorage.getItem('sidebarCollapsed');
    if (savedState === 'true') {
      isCollapsed = true;
      updateSidebarState();
    }
  });

  // Handle mobile responsiveness
  const handleResize = () => {
    if (window.innerWidth < 768) {
      // On mobile, always collapse the sidebar when it's hidden
      if (!sidebar?.classList.contains('-translate-x-full')) {
        isCollapsed = false;
        updateSidebarState();
      }
    }
  };

  window.addEventListener('resize', handleResize);
  handleResize(); // Initial check
</script>