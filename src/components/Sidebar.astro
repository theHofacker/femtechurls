---
// Updated Sidebar.astro with new categories based on client feedback

// Main navigation categories
const mainNavItems = [
  { name: 'Home', path: '/', icon: 'M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6' },
  { name: 'FemTech News & Innovation', path: '/femtech-news-innovation', icon: 'M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z' }
];

// Health Categories
const healthNavItems = [
  { name: 'All Health Topics', path: '/health', icon: 'M19 9l-7 7-7-7' },
  { name: 'Cardiovascular', path: '/health/cardiovascular', icon: 'M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z' },
  { name: 'Menstrual Health', path: '/health/menstrual-health', icon: 'M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z' },
  { name: 'Maternal Health', path: '/health/maternal-health', icon: 'M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z' },
  { name: 'Perimenopause', path: '/health/perimenopause', icon: 'M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z' },
  { name: 'Cancer', path: '/health/cancer', icon: 'M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z' },
  { name: 'Brain Health', path: '/health/brain-health', icon: 'M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z' },
  { name: 'Autoimmune', path: '/health/autoimmune', icon: 'M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z' },
  { name: 'Mental Health', path: '/health/mental-health', icon: 'M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4' },
  { name: 'Relationships', path: '/health/relationships', icon: 'M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z' },
  { name: 'Lifestyle', path: '/health/lifestyle', icon: 'M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6' }
];

// Industry Categories
const industryNavItems = [
  { name: 'State of FemTech', path: '/industry/state-of-femtech', icon: 'M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z' },
  { name: 'Future of FemTech', path: '/industry/future-of-femtech', icon: 'M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z' },
  { name: 'Organizations', path: '/industry/organizations', icon: 'M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z' }
];

// Check if path is active (used for highlighting current page)
const pathname = new URL(Astro.request.url).pathname;

// Helper function to check if a path is active
const isActivePath = (path: string) => {
  if (path === '/') {
    return pathname === '/';
  }
  return pathname.startsWith(path);
};

// Helper function to check if a section is active
const isSectionActive = (items: typeof mainNavItems) => {
  return items.some(item => isActivePath(item.path));
};

// State to track expanded sections
const isHealthExpanded = isSectionActive(healthNavItems);
const isIndustryExpanded = isSectionActive(industryNavItems);
---

<div class="h-full flex flex-col py-4">
  <div class="px-4 pb-6 flex justify-between items-center border-b border-gray-200">
    <a href="/" class="text-xl font-bold text-purple-800 flex items-center overflow-hidden">
      <span class="sidebar-text">FemTechURLs</span>
    </a>
    <button 
      id="sidebarToggle"
      class="ml-2 p-1.5 rounded-md bg-purple-100 text-purple-800 hover:bg-purple-200 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"
      aria-label="Toggle Sidebar"
    >
      <svg 
        id="toggleIcon" 
        xmlns="http://www.w3.org/2000/svg" 
        class="h-5 w-5 transition-transform duration-200" 
        fill="none" 
        viewBox="0 0 24 24" 
        stroke="currentColor"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 19l-7-7 7-7m8 14l-7-7 7-7" />
      </svg>
    </button>
  </div>

  <nav class="flex-1 px-2 space-y-1 overflow-y-auto">
    <!-- Main Navigation -->
    {mainNavItems.map((item) => {
      const isActive = isActivePath(item.path);
      
      return (
        <a
          href={item.path}
          class={`flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors ${
            isActive
              ? 'bg-purple-100 text-purple-900'
              : 'text-gray-600 hover:bg-purple-50 hover:text-purple-900'
          }`}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class={`h-5 w-5 mr-3 flex-shrink-0 ${
              isActive ? 'text-purple-700' : 'text-gray-500'
            }`}
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={item.icon} />
          </svg>
          <span class="sidebar-text truncate">{item.name}</span>
        </a>
      );
    })}

    <!-- Health Categories Section -->
    <div class="mt-4">
      <button
        id="healthToggle"
        class={`w-full flex items-center px-2 py-2 text-sm font-medium rounded-md ${
          isHealthExpanded ? 'bg-purple-100 text-purple-900' : 'text-gray-600 hover:bg-purple-50 hover:text-purple-900'
        }`}
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class={`h-5 w-5 mr-3 ${isHealthExpanded ? 'text-purple-700' : 'text-gray-500'}`}
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
        </svg>
        <span class="sidebar-text truncate">Health Categories</span>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class={`ml-auto h-5 w-5 transition-transform ${isHealthExpanded ? 'rotate-180' : ''}`}
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
        </svg>
      </button>

      <div id="healthItems" class={`mt-1 pl-4 ${isHealthExpanded ? '' : 'hidden'}`}>
        {healthNavItems.map((item) => {
          const isActive = isActivePath(item.path);
          
          return (
            <a
              href={item.path}
              class={`flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors ${
                isActive
                  ? 'bg-purple-50 text-purple-900'
                  : 'text-gray-600 hover:bg-purple-50 hover:text-purple-900'
              }`}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class={`h-5 w-5 mr-3 flex-shrink-0 ${
                  isActive ? 'text-purple-700' : 'text-gray-500'
                }`}
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={item.icon} />
              </svg>
              <span class="sidebar-text truncate">{item.name}</span>
            </a>
          );
        })}
      </div>
    </div>

    <!-- Industry Categories Section -->
    <div class="mt-2">
      <button
        id="industryToggle"
        class={`w-full flex items-center px-2 py-2 text-sm font-medium rounded-md ${
          isIndustryExpanded ? 'bg-purple-100 text-purple-900' : 'text-gray-600 hover:bg-purple-50 hover:text-purple-900'
        }`}
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class={`h-5 w-5 mr-3 ${isIndustryExpanded ? 'text-purple-700' : 'text-gray-500'}`}
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
        </svg>
        <span class="sidebar-text truncate">Industry Categories</span>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class={`ml-auto h-5 w-5 transition-transform ${isIndustryExpanded ? 'rotate-180' : ''}`}
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
        </svg>
      </button>

      <div id="industryItems" class={`mt-1 pl-4 ${isIndustryExpanded ? '' : 'hidden'}`}>
        {industryNavItems.map((item) => {
          const isActive = isActivePath(item.path);
          
          return (
            <a
              href={item.path}
              class={`flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors ${
                isActive
                  ? 'bg-purple-50 text-purple-900'
                  : 'text-gray-600 hover:bg-purple-50 hover:text-purple-900'
              }`}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class={`h-5 w-5 mr-3 flex-shrink-0 ${
                  isActive ? 'text-purple-700' : 'text-gray-500'
                }`}
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={item.icon} />
              </svg>
              <span class="sidebar-text truncate">{item.name}</span>
            </a>
          );
        })}
      </div>
    </div>
  </nav>

  <div class="px-4 pt-4 border-t border-gray-200 mt-auto">
    <p class="text-xs text-gray-500 sidebar-text">
      Last updated: {new Date().toLocaleDateString()}
    </p>
  </div>
</div>

<style>
  nav {
    scrollbar-width: thin;
    scrollbar-color: theme('colors.purple.200') theme('colors.purple.50');
  }

  nav::-webkit-scrollbar {
    width: 6px;
  }

  nav::-webkit-scrollbar-track {
    background: theme('colors.purple.50');
  }

  nav::-webkit-scrollbar-thumb {
    background-color: theme('colors.purple.200');
    border-radius: 3px;
  }
</style>

<script>
  const sidebarToggle = document.getElementById('sidebarToggle');
  const toggleIcon = document.getElementById('toggleIcon');
  const sidebarTexts = document.querySelectorAll('.sidebar-text');
  const sidebar = document.getElementById('sidebar');
  
  // Toggle for Health section
  const healthToggle = document.getElementById('healthToggle');
  const healthItems = document.getElementById('healthItems');
  
  // Toggle for Industry section
  const industryToggle = document.getElementById('industryToggle');
  const industryItems = document.getElementById('industryItems');
  
  let isCollapsed = false;
  
  const updateSidebarState = () => {
    sidebarTexts.forEach(text => {
      if (isCollapsed) {
        text.classList.add('hidden');
      } else {
        text.classList.remove('hidden');
      }
    });
    
    toggleIcon?.classList.toggle('rotate-180', isCollapsed);
    
    if (sidebar) {
      if (isCollapsed) {
        sidebar.classList.remove('w-64');
        sidebar.classList.add('w-16');
      } else {
        sidebar.classList.remove('w-16');
        sidebar.classList.add('w-64');
      }
    }
  };

  sidebarToggle?.addEventListener('click', () => {
    isCollapsed = !isCollapsed;
    updateSidebarState();
    
    // Save the sidebar state in localStorage
    localStorage.setItem('sidebarCollapsed', String(isCollapsed));
  });

  // Restore sidebar state from localStorage on page load
  document.addEventListener('DOMContentLoaded', () => {
    const savedState = localStorage.getItem('sidebarCollapsed');
    if (savedState === 'true') {
      isCollapsed = true;
      updateSidebarState();
    }
    
    // Set up section toggles
    healthToggle?.addEventListener('click', () => {
      healthItems?.classList.toggle('hidden');
    });
    
    industryToggle?.addEventListener('click', () => {
      industryItems?.classList.toggle('hidden');
    });
  });

  // Handle initial state on mobile
  const handleResize = () => {
    if (window.innerWidth < 768) {
      // On mobile, always collapse the sidebar when it's hidden
      if (!sidebar?.classList.contains('-translate-x-full')) {
        isCollapsed = false;
        updateSidebarState();
      }
    }
  };

  window.addEventListener('resize', handleResize);
  handleResize(); // Initial check
</script>
