---
// src/pages/search.astro with improved debugging
import BaseLayout from '../layouts/BaseLayout.astro';
import NewsCard from '../components/NewsCard.astro';
import SkeletonCard from '../components/SkeletonCard.astro';
import { searchNews, getAllNewsItems, initializeSearch } from '../utils/globalSearch.ts';

// Get the search query from URL parameters
const query = Astro.url.searchParams.get('q') || '';
console.log('Search page loaded with query:', query);

// Pre-initialize search to ensure data is loaded
try {
  await initializeSearch();
  console.log('Search initialized on server');
} catch (error) {
  console.error('Error initializing search:', error);
}

// Search for news items with the query
let results = [];
try {
  if (query) {
    console.log(`Searching for "${query}" on server`);
    results = await searchNews(query);
    console.log(`Found ${results.length} results for "${query}" on server`);
    
    // If no results with exact search, try a more flexible approach
    if (results.length === 0) {
      console.log('No exact matches, trying flexible search');
      
      // Get all items to search manually
      const allItems = await getAllNewsItems();
      
      // Break query into words for more flexible matching
      const queryWords = query.toLowerCase().split(/\s+/).filter(word => word.length > 2);
      
      results = allItems.filter(item => {
        const title = (item.title || '').toLowerCase();
        const description = (item.description || '').toLowerCase();
        
        // Check if any query word is in the title or description
        return queryWords.some(word => 
          title.includes(word) || description.includes(word)
        );
      });
      
      console.log(`Flexible search found ${results.length} results`);
    }
  }
} catch (error) {
  console.error('Error searching news:', error);
}

// Add a debug section to display raw data (only in development)
const isDevMode = import.meta.env.MODE === 'development';
const debugItems = isDevMode ? (results.length > 0 ? results.slice(0, 3) : await getAllNewsItems().then(items => items.slice(0, 3))) : [];

// Group results by source
const groupedBySource = results.reduce((acc, item) => {
  if (!acc[item.sourceName]) {
    acc[item.sourceName] = [];
  }
  acc[item.sourceName].push(item);
  return acc;
}, {});

// Get list of sources
const sources = Object.keys(groupedBySource);
---

<BaseLayout title={`Search Results for "${query}" - FemTechURLs`}>
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-2">Search Results</h1>
    <p class="text-gray-600">
      {results.length} results found for "{query}"
    </p>
  </div>
  
  <!-- Search box for refining search -->
  <div class="mb-8">
    <form action="/search" method="get" class="flex gap-2">
      <div class="flex-1 relative">
        <input
          type="search"
          name="q"
          value={query}
          placeholder="Refine your search..."
          class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
        />
      </div>
      <button 
        type="submit"
        class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"
      >
        Search
      </button>
    </form>
  </div>
  
  {sources.length > 0 ? (
    <div class="space-y-12">
      {sources.map(source => (
        <section>
          <h2 class="text-2xl font-bold text-gray-900 mb-6">{source}</h2>
          <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
            {groupedBySource[source].map(item => (
              <NewsCard
                title={item.title}
                description={item.description}
                link={item.link}
                date={item.date}
                source={item.sourceName}
              />
            ))}
          </div>
        </section>
      ))}
    </div>
  ) : query ? (
    <div class="text-center py-16">
      <div class="text-gray-500 mb-6">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
        <h2 class="text-xl font-medium mt-4">No results found</h2>
        <p class="mt-2">Try different keywords or check your spelling</p>
      </div>
    </div>
  ) : (
    <div class="text-center py-16">
      <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
        <SkeletonCard />
        <SkeletonCard />
        <SkeletonCard />
      </div>
    </div>
  )}
  
  {/* Debug section - only visible in development */}
  {isDevMode && (
    <div class="mt-16 p-4 bg-gray-100 rounded-lg">
      <h2 class="text-xl font-bold text-gray-900 mb-4">Debug Information</h2>
      <div class="mb-4">
        <p><strong>Query:</strong> "{query}"</p>
        <p><strong>Results count:</strong> {results.length}</p>
      </div>
      
      <h3 class="font-bold mb-2">Sample Data Items:</h3>
      <div class="space-y-4">
        {debugItems.map((item, i) => (
          <div class="p-4 bg-white rounded shadow-sm">
            <p><strong>Item {i+1}</strong></p>
            <p><strong>Title:</strong> {item.title}</p>
            <p><strong>Source:</strong> {item.sourceName}</p>
            <p><strong>Category:</strong> {item.category}</p>
            <p><strong>Description:</strong> {item.description?.substring(0, 100)}...</p>
          </div>
        ))}
      </div>
    </div>
  )}
</BaseLayout>

<script>
  // This script enhances the search page with client-side functionality
  document.addEventListener('DOMContentLoaded', () => {
    // Get elements
    const searchForm = document.querySelector('form');
    const searchInput = document.querySelector('input[name="q"]');
    
    // Focus the search input on page load
    if (searchInput instanceof HTMLInputElement) {
      searchInput.focus();
      // Position cursor at the end of the text
      const length = searchInput.value.length;
      searchInput.setSelectionRange(length, length);
    }
    
    // Log details about the search
    console.log('Client-side search page loaded');
    console.log('Search query:', searchInput?.value);
    console.log('Result sections:', document.querySelectorAll('section').length);
    console.log('Result cards:', document.querySelectorAll('.grid > div').length);
  });
</script>
