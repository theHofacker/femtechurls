---
// src/pages/search.astro
import BaseLayout from '../layouts/BaseLayout.astro';
import NewsCard from '../components/NewsCard.astro';
import SkeletonCard from '../components/SkeletonCard.astro';
import { fetchNews } from '../utils/feedAggregator';

// Get the search query from URL parameters
const query = Astro.url.searchParams.get('q') || '';

// Initialize variables to track loading and error states
let isLoading = true;
let hasError = false;
let errorMessage = '';
let results = [];

try {
  // Fetch all news items if we have a query
  if (query && query.trim() !== '') {
    const allNews = await fetchNews();
    
    // Simple search function
    const normalizedQuery = query.toLowerCase().trim();
    
    // Filter news items based on the search query
    results = allNews.filter(item => {
      const title = (item.title || '').toLowerCase();
      const description = (item.description || '').toLowerCase();
      const sourceName = (item.sourceName || '').toLowerCase();
      const category = (item.category || '').toLowerCase();
      
      return title.includes(normalizedQuery) || 
             description.includes(normalizedQuery) || 
             sourceName.includes(normalizedQuery) || 
             category.includes(normalizedQuery);
    });
  }
  
  // Set loading state to false
  isLoading = false;
} catch (error) {
  console.error('Error searching news:', error);
  isLoading = false;
  hasError = true;
  errorMessage = error.message || 'An error occurred while searching';
}

// Group results by source
const groupedBySource = results.reduce((acc, item) => {
  if (!acc[item.sourceName]) {
    acc[item.sourceName] = [];
  }
  acc[item.sourceName].push(item);
  return acc;
}, {});

// Get list of sources
const sources = Object.keys(groupedBySource);
---

<BaseLayout title={`Search Results for "${query}" - FemTechURLs`}>
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-2">Search Results</h1>
    <p class="text-gray-600">
      {isLoading ? 'Searching...' : `${results.length} results found for "${query}"`}
    </p>
  </div>
  
  <!-- Search box for refining search -->
  <div class="mb-8">
    <form action="/search" method="get" class="flex gap-2">
      <div class="flex-1 relative">
        <input
          type="search"
          name="q"
          value={query}
          placeholder="Refine your search..."
          class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
        />
      </div>
      <button 
        type="submit"
        class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"
      >
        Search
      </button>
    </form>
  </div>
  
  <!-- Loading state -->
  {isLoading && (
    <div class="text-center py-16">
      <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-purple-500 mx-auto"></div>
      <p class="mt-4 text-lg text-gray-600">Searching for results...</p>
    </div>
  )}
  
  <!-- Error state -->
  {hasError && (
    <div class="text-center py-16">
      <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg max-w-md mx-auto">
        <p class="font-medium">Error searching</p>
        <p class="text-sm mt-1">{errorMessage}</p>
        <p class="mt-3 text-sm">Please try again or modify your search query.</p>
      </div>
    </div>
  )}
  
  <!-- Results display -->
  {!isLoading && !hasError && (
    sources.length > 0 ? (
      <div class="space-y-12">
        {sources.map(source => (
          <section>
            <h2 class="text-2xl font-bold text-gray-900 mb-6">{source}</h2>
            <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
              {groupedBySource[source].map(item => (
                <NewsCard
                  title={item.title}
                  description={item.description}
                  link={item.link}
                  date={item.date}
                  source={item.sourceName}
                  image={item.image}
                  category={item.category}
                />
              ))}
            </div>
          </section>
        ))}
      </div>
    ) : query ? (
      <div class="text-center py-16">
        <div class="text-gray-500 mb-6">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
          <h2 class="text-xl font-medium mt-4">No results found</h2>
          <p class="mt-2">Try different keywords or check your spelling</p>
        </div>
      </div>
    ) : (
      <div class="text-center py-16">
        <div class="text-gray-500">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
          <h2 class="text-xl font-medium mt-4">Type a search term to get started</h2>
          <p class="mt-2">Search for any topic in women's health technology</p>
        </div>
      </div>
    )
  )}
</BaseLayout>

<script>
  // Focus search input on page load
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.querySelector('input[name="q"]');
    if (searchInput instanceof HTMLInputElement) {
      searchInput.focus();
      const length = searchInput.value.length;
      searchInput.setSelectionRange(length, length);
    }

    // Handle form submission (just for additional safety)
    const searchForm = document.querySelector('form');
    if (searchForm) {
      searchForm.addEventListener('submit', function(e) {
        const searchValue = searchInput?.value?.trim();
        
        if (!searchValue) {
          e.preventDefault();
          return false;
        }
      });
    }
  });
</script>
