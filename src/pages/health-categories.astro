---
import BaseLayout from '../layouts/BaseLayout.astro';
import NewsCard from '../components/NewsCard.astro';
import SkeletonCard from '../components/SkeletonCard.astro';
import CategoryTiles from '../components/CategoryTiles.astro';
import { fetchNewsByCategory, fetchNews } from '../utils/feedAggregator';

// Define health categories
const healthCategories = [
  { 
    id: 'all', 
    name: 'All Health Topics', 
    color: 'bg-purple-600',
    icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" /></svg>'
  },
  { 
    id: 'Cardiovascular', 
    name: 'Cardiovascular', 
    color: 'bg-red-600',
    icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" /></svg>'
  },
  // ... other health categories (as previously defined)
];

// Get the active category from the URL path
const pathname = new URL(Astro.request.url).pathname;
const activeCategoryId = pathname.split('/').pop()?.replace(/^-/, '') || 'all';

// Fetch news based on the active category
let news = [];
try {
  if (activeCategoryId === 'all') {
    // Fetch all women's health topics
    const allNews = await fetchNews();
    news = allNews.filter(item => 
      healthCategories.slice(1).some(cat => 
        item.category === cat.id || 
        item.title.includes(cat.name) || 
        item.description?.includes(cat.name)
      )
    );
  } else {
    // Fetch specific category
    news = await fetchNewsByCategory(activeCategoryId);
    
    // If no specific category news, try to filter by keywords
    if (news.length === 0) {
      const allNews = await fetchNews();
      const category = healthCategories.find(c => c.id === activeCategoryId);
      if (category) {
        news = allNews.filter(item => 
          item.title.toLowerCase().includes(category.name.toLowerCase()) || 
          item.description?.toLowerCase().includes(category.name.toLowerCase())
        );
      }
    }
  }
} catch (error) {
  console.error(`Error fetching news:`, error);
}

// Group by source for display
const groupedBySource = news.reduce((acc, item) => {
  if (!acc[item.sourceName]) {
    acc[item.sourceName] = [];
  }
  acc[item.sourceName].push(item);
  return acc;
}, {});

const sources = Object.keys(groupedBySource);

// Page title based on active category
const activeCategory = healthCategories.find(c => c.id === activeCategoryId) || healthCategories[0];
const title = activeCategory.id === 'all' ? 'Women\'s Health Topics' : activeCategory.name;
const description = `Latest news and resources on ${activeCategory.name.toLowerCase()} for women`;
---

<BaseLayout title={`${title} - FemTechURLs`}>
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-2">{title}</h1>
    <p class="text-gray-600">{description}</p>
  </div>
  
  <!-- Category Tiles -->
  <CategoryTiles 
    categories={healthCategories} 
    activeCategoryId={activeCategoryId} 
    baseUrl="/health"
  />
  
  {sources.length > 0 ? (
    <div class="space-y-12">
      {sources.map(source => (
        <section>
          <h2 class="text-2xl font-bold text-gray-900 mb-6">{source}</h2>
          <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
            {groupedBySource[source].map(item => (
              <div class="article-card-container" data-category={item.category}>
                <NewsCard
                  title={item.title}
                  description={item.description}
                  link={item.link}
                  date={item.date}
                  source={item.sourceName}
                  image={item.image}
                  category={activeCategory.id !== 'all' ? activeCategory.id : item.category}
                />
              </div>
            ))}
          </div>
        </section>
      ))}
    </div>
  ) : (
    <div class="text-center py-16">
      <div class="text-gray-500 mb-6">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z" />
        </svg>
        <h2 class="text-xl font-medium mt-4">No articles found</h2>
        <p class="mt-2">We couldn't find any articles for this category yet. Check back later or try a different category.</p>
      </div>
      <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3 mt-8">
        <SkeletonCard />
        <SkeletonCard />
        <SkeletonCard />
      </div>
    </div>
  )}
</BaseLayout>

<style>
  /* Category-specific accent colors for this page */
  .category-tile.active {
    @apply font-bold;
  }
  
  /* Animation for category tiles */
  .category-tile {
    transition: transform 0.2s, box-shadow 0.2s;
  }
  
  .category-tile:hover {
    transform: translateY(-2px);
  }
</style>
