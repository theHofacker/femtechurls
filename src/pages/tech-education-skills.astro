---
import BaseLayout from '../layouts/BaseLayout.astro';
import NewsCard from '../components/NewsCard.astro';
import SkeletonCard from '../components/SkeletonCard.astro';
import { fetchNewsByCategory, sampleNewsItems } from '../utils/feedAggregator';

// Category configuration
// Tech Education & Skills
const category = 'Tech Education & Skills';
const title = 'Tech Education & Skills';
const description = 'Tutorials, guides, and educational content to help women build technical skills and thrive in technology-focused careers.';

// Fetch news for this category with improved error handling
let news;
try {
  news = await fetchNewsByCategory(category);
  
  // If there's no news (empty array), use some fallbacks
  if (!news || news.length === 0) {
    console.warn(`No news items returned for category: ${category}, using sample data`);
    news = sampleNewsItems.filter(item => item.category === category);
  }
} catch (error) {
  console.error(`Error fetching news for category ${category}:`, error);
  news = sampleNewsItems.filter(item => item.category === category);
}

// Group by source
const groupedBySource = news.reduce((acc, item) => {
  if (!acc[item.sourceName]) {
    acc[item.sourceName] = [];
  }
  acc[item.sourceName].push(item);
  return acc;
}, {} as Record<string, typeof news>);

// Default display settings
const articlesPerCategory = 3;
const articlesPerSource = 5;
const sources = Object.keys(groupedBySource);
---

<BaseLayout title={`${title} - FemTechURLs`}>
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-2">{title}</h1>
    <p class="text-gray-600">{description}</p>
  </div>
  
  {sources.length > 0 ? (
    <div class="space-y-12">
      {sources.map(source => (
        <section>
          <h2 class="text-2xl font-bold text-gray-900 mb-6">{source}</h2>
          <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
            {groupedBySource[source].map(item => (
              <NewsCard
                title={item.title}
                description={item.description}
                link={item.link}
                date={item.date}
                source={item.sourceName}
              />
            ))}
          </div>
        </section>
      ))}
    </div>
  ) : (
    <div class="text-center py-16">
      <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
        <SkeletonCard />
        <SkeletonCard />
        <SkeletonCard />
      </div>
    </div>
  )}
</BaseLayout>

<script>
  // Handle search functionality
  const searchInput = document.getElementById('search-input');
  
  function handleSearch(value: string) {
    const articles = document.querySelectorAll('.bg-white');
    const sections = document.querySelectorAll('section');
    value = value.toLowerCase().trim();
    
    sections.forEach(section => {
      let hasVisibleArticles = false;
      const sectionArticles = section.querySelectorAll('.bg-white');
      
      sectionArticles.forEach(article => {
        const title = article.querySelector('h3')?.textContent?.toLowerCase() || '';
        const description = article.querySelector('p')?.textContent?.toLowerCase() || '';
        
        if (title.includes(value) || description.includes(value)) {
          article.classList.remove('hidden');
          hasVisibleArticles = true;
        } else {
          article.classList.add('hidden');
        }
      });
      
      if (hasVisibleArticles) {
        section.classList.remove('hidden');
      } else {
        section.classList.add('hidden');
      }
    });
  }
  
  searchInput?.addEventListener('input', (e) => {
    handleSearch((e.target as HTMLInputElement).value);
  });
</script>
