---
import BaseLayout from '../layouts/BaseLayout.astro';
import NewsCard from '../components/NewsCard.astro';
import SkeletonCard from '../components/SkeletonCard.astro';
import CategoryTiles from '../../components/CategoryTiles.astro';
import { fetchNewsByCategory, sampleNewsItems } from '../utils/feedAggregator';

// Category configuration
// Reproductive & Maternal Health
const category = 'Reproductive & Maternal Health';
const title = 'Reproductive & Maternal Health';
const description = 'Information and resources focused on reproductive wellness, fertility, pregnancy tracking, and maternal care solutions.';


// Initial number of cards to display per source
const initialCardsToShow = 6;

// Fetch news for this category with improved error handling
let news;
try {
  news = await fetchNewsByCategory(category);
  
  // If there's no news (empty array), use some fallbacks
  if (!news || news.length === 0) {
    console.warn(`No news items returned for category: ${category}, using sample data`);
    news = sampleNewsItems.filter(item => item.category === category);
  }
} catch (error) {
  console.error(`Error fetching news for category ${category}:`, error);
  news = sampleNewsItems.filter(item => item.category === category);
}

// Group by source
const groupedBySource = news.reduce((acc, item) => {
  if (!acc[item.sourceName]) {
    acc[item.sourceName] = [];
  }
  acc[item.sourceName].push(item);
  return acc;
}, {} as Record<string, typeof news>);

const sources = Object.keys(groupedBySource);
---

<BaseLayout title={`${title} - FemTechURLs`}>
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-2">{title}</h1>
    <p class="text-gray-600">{description}</p>
  </div>
  
  {sources.length > 0 ? (
    <div class="space-y-12">
      {sources.map(source => {
        const sourceNews = groupedBySource[source];
        const hasMoreItems = sourceNews.length > initialCardsToShow;
        
        return (
          <section class="source-section" data-source={source}>
            <h2 class="text-2xl font-bold text-gray-900 mb-6">{source}</h2>
            <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3 source-news-grid">
              {sourceNews.map((item, index) => (
                <div class={`news-card-container ${index >= initialCardsToShow ? 'hidden' : ''}`}>
                  <NewsCard
                    title={item.title}
                    description={item.description}
                    link={item.link}
                    date={item.date}
                    source={item.sourceName}
                    image={item.image} <!-- Make sure this is included -->
                    category={item.category}
                  />
                </div>
              ))}
            </div>
            
            {hasMoreItems && (
              <div class="mt-8 text-center">
                <button 
                  class="load-more-btn px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 transition-colors"
                  data-source={source}
                >
                  Load More
                </button>
              </div>
            )}
          </section>
        );
      })}
    </div>
  ) : (
    <div class="text-center py-16">
      <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
        <SkeletonCard />
        <SkeletonCard />
        <SkeletonCard />
      </div>
    </div>
  )}
</BaseLayout>

<script>
  // Handle Load More functionality
  document.addEventListener('DOMContentLoaded', () => {
    const loadMoreButtons = document.querySelectorAll('.load-more-btn');
    
    loadMoreButtons.forEach(button => {
      if (button instanceof HTMLElement) {
        const sourceName = button.getAttribute('data-source');
        let currentlyShown = 6; // Start with initial cards already shown
        const increment = 6; // How many more to show each time
        
        button.addEventListener('click', () => {
          const section = button.closest('.source-section');
          if (!section) return;
          
          const hiddenCards = section.querySelectorAll('.news-card-container.hidden:not(.search-hidden)');
          const cardsToShow = Array.from(hiddenCards).slice(0, increment);
          
          // Show the next batch of cards
          cardsToShow.forEach(card => {
            card.classList.remove('hidden');
          });
          
          // Update counter
          currentlyShown += cardsToShow.length;
          
          // Hide the button if no more cards to show
          if (hiddenCards.length <= increment) {
            button.classList.add('hidden');
          }
          
          // Update button text to show count
          const totalCards = section.querySelectorAll('.news-card-container').length;
          button.textContent = `Showing ${currentlyShown} of ${totalCards} - Load More`;
        });
      }
    });
    
    // Handle search functionality
    const searchInput = document.getElementById('global-search-input');
    
    function handleSearch(value) {
      const articles = document.querySelectorAll('.news-card-container');
      const sections = document.querySelectorAll('.source-section');
      value = value.toLowerCase().trim();
      
      // Reset visibility first (only for search filtering)
      articles.forEach(article => {
        article.classList.remove('search-hidden');
      });
      
      if (value === '') return; // No search term, no filtering
      
      sections.forEach(section => {
        let hasVisibleArticles = false;
        const sectionArticles = section.querySelectorAll('.news-card-container:not(.hidden)');
        
        sectionArticles.forEach(article => {
          const card = article.querySelector('.bg-white');
          if (!card) return;
          
          const title = card.querySelector('h3')?.textContent?.toLowerCase() || '';
          const description = card.querySelector('p')?.textContent?.toLowerCase() || '';
          
          if (title.includes(value) || description.includes(value)) {
            hasVisibleArticles = true;
          } else {
            article.classList.add('search-hidden');
          }
        });
        
        // Show/hide the section based on matching articles
        if (hasVisibleArticles) {
          section.classList.remove('hidden');
        } else {
          section.classList.add('hidden');
        }
      });
    }
    
    searchInput?.addEventListener('input', (e) => {
      if (e.target instanceof HTMLInputElement) {
        handleSearch(e.target.value);
      }
    });
  });
</script>

<style>
  .search-hidden {
    display: none;
  }
</style>
