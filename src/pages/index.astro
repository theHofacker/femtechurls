---
import BaseLayout from '../layouts/BaseLayout.astro';
import NewsCard from '../components/NewsCard.astro';
import SkeletonCard from '../components/SkeletonCard.astro';
import { fetchNews } from '../utils/feedAggregator';

// Fetch all news items with improved error handling
let news;
try {
  news = await fetchNews();
  
  // If there's no news (empty array), use some fallbacks
  if (!news || news.length === 0) {
    console.warn('No news items returned from fetchNews, using sample data');
    // Import sample data directly
    const { sampleNewsItems } = await import('../utils/feedAggregator');
    news = sampleNewsItems;
  }
} catch (error) {
  console.error('Error fetching news:', error);
  // Import sample data directly
  const { sampleNewsItems } = await import('../utils/feedAggregator');
  news = sampleNewsItems;
}

// Group news by category
const groupedByCategory = news.reduce((acc, item) => {
  if (!acc[item.category]) {
    acc[item.category] = [];
  }
  acc[item.category].push(item);
  return acc;
}, {} as Record<string, typeof news>);

// Group news by source
const groupedBySource = news.reduce((acc, item) => {
  if (!acc[item.sourceName]) {
    acc[item.sourceName] = [];
  }
  acc[item.sourceName].push(item);
  return acc;
}, {} as Record<string, typeof news>);

// Updated categories to display
const categories = [
  { id: 'FemTech News & Innovation', name: 'FemTech News & Innovation', slug: 'femtech-news-innovation' },
  { id: 'Reproductive & Maternal Health', name: 'Reproductive & Maternal Health', slug: 'reproductive-maternal-health' },
  { id: 'Women\'s Health & Wellness', name: 'Women\'s Health & Wellness', slug: 'womens-health-wellness' },
  { id: 'Women in Tech & Leadership', name: 'Women in Tech & Leadership', slug: 'women-in-tech-leadership' },
  { id: 'Career & Professional Development', name: 'Career & Professional Development', slug: 'career-professional-development' },
  { id: 'Tech Education & Skills', name: 'Tech Education & Skills', slug: 'tech-education-skills' }
];

// Default number of articles to show per section
const articlesPerCategory = 3;
const articlesPerSource = 3;
---

<BaseLayout title="FemTechURLs">
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-2">Latest in FemTech & Women's Health</h1>
    <p class="text-gray-600">Your curated source for women's health technology, innovations, and resources.</p>
  </div>

  <div class="bg-white rounded-lg shadow mb-8 transition-all duration-300">
    <button 
      id="customize-toggle" 
      class="w-full px-6 py-4 text-left flex items-center justify-between hover:bg-gray-50 focus:outline-none"
    >
      <h2 class="text-lg font-semibold text-gray-900">Customize Your Dashboard</h2>
      <svg 
        id="toggle-icon"
        xmlns="http://www.w3.org/2000/svg" 
        class="h-5 w-5 text-purple-600 transform transition-transform duration-300" 
        fill="none" 
        viewBox="0 0 24 24" 
        stroke="currentColor"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
    </button>
    
    <div id="customize-panel" class="hidden px-6 pb-6 space-y-4 border-t border-gray-100">
      <div class="pt-4">
        <label class="block text-sm font-medium text-gray-700 mb-1">Featured Categories</label>
        <div class="flex flex-wrap gap-2">
          {categories.map(category => (
            <label class="inline-flex items-center px-3 py-1.5 rounded-full bg-gray-100 hover:bg-gray-200 cursor-pointer">
              <input 
                type="checkbox" 
                class="category-toggle h-4 w-4 text-purple-600 mr-2" 
                data-category={category.id} 
                checked 
              />
              <span class="text-sm">{category.name}</span>
            </label>
          ))}
        </div>
      </div>
      
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Articles per section</label>
        <select id="articles-per-section" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm rounded-md">
          <option value="3">3 articles (Default)</option>
          <option value="6">6 articles</option>
          <option value="9">9 articles</option>
        </select>
      </div>
      
      <div class="pt-2">
        <button id="save-preferences" class="w-full px-4 py-2 bg-purple-600 text-white text-sm font-medium rounded hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 transition-colors">
          Save Preferences
        </button>
      </div>
    </div>
  </div>

  <div class="flex justify-end mb-6">
    <div class="bg-white border border-gray-200 rounded-lg inline-flex">
      <button 
        id="category-view" 
        class="px-4 py-2 text-sm font-medium rounded-l-lg bg-purple-100 text-purple-800 focus:outline-none"
      >
        Group by Category
      </button>
      <button 
        id="source-view" 
        class="px-4 py-2 text-sm font-medium rounded-r-lg text-gray-700 hover:bg-gray-50 focus:outline-none"
      >
        Group by Source
      </button>
    </div>
  </div>

  <!-- Category-based view (default) -->
  <div id="category-content" class="space-y-12">
    {categories.map(category => {
      const categoryNews = groupedByCategory[category.id] || [];
      return categoryNews.length > 0 ? (
        <section id={category.slug}>
          <div class="flex items-center justify-between mb-6">
            <h2 class="text-2xl font-bold text-gray-900">{category.name}</h2>
            <a 
              href={`/${category.slug}`}
              class="text-purple-700 hover:text-purple-900 font-medium flex items-center"
            >
              View All
              <svg class="ml-1 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </a>
          </div>

          <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
            {categoryNews.slice(0, articlesPerCategory).map(item => (
              <NewsCard
                title={item.title}
                description={item.description}
                link={item.link}
                date={item.date}
                source={item.sourceName}
              />
            ))}
          </div>
        </section>
      ) : null;
    })}
  </div>

  <!-- Source-based view (initially hidden) -->
  <div id="source-content" class="space-y-12 hidden">
    {Object.keys(groupedBySource).sort().map(sourceName => (
      <section>
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-2xl font-bold text-gray-900">{sourceName}</h2>
        </div>
        
        <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
          {groupedBySource[sourceName].slice(0, articlesPerSource).map(item => (
            <NewsCard
              title={item.title}
              description={item.description}
              link={item.link}
              date={item.date}
              source={item.sourceName}
            />
          ))}
        </div>
      </section>
    ))}
  </div>

  {Object.keys(groupedByCategory).length === 0 && Object.keys(groupedBySource).length === 0 && (
    <div class="text-center py-16">
      <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
        <SkeletonCard />
        <SkeletonCard />
        <SkeletonCard />
      </div>
    </div>
  )}
</BaseLayout>

<script>
  // Handle search functionality
  const searchInput = document.getElementById('search-input');
  
  function handleSearch(value: string) {
    const articles = document.querySelectorAll('.bg-white');
    const sections = document.querySelectorAll('section');
    value = value.toLowerCase().trim();
    
    sections.forEach(section => {
      let hasVisibleArticles = false;
      const sectionArticles = section.querySelectorAll('.bg-white');
      
      sectionArticles.forEach(article => {
        const title = article.querySelector('h3')?.textContent?.toLowerCase() || '';
        const description = article.querySelector('p')?.textContent?.toLowerCase() || '';
        
        if (title.includes(value) || description.includes(value)) {
          article.classList.remove('hidden');
          hasVisibleArticles = true;
        } else {
          article.classList.add('hidden');
        }
      });
      
      if (hasVisibleArticles) {
        section.classList.remove('hidden');
      } else {
        section.classList.add('hidden');
      }
    });
  }

  searchInput?.addEventListener('input', (e) => {
    handleSearch((e.target as HTMLInputElement).value);
  });

  // Toggle customization panel
  const customizeToggle = document.getElementById('customize-toggle');
  const customizePanel = document.getElementById('customize-panel');
  const toggleIcon = document.getElementById('toggle-icon');
  
  customizeToggle?.addEventListener('click', () => {
    customizePanel?.classList.toggle('hidden');
    toggleIcon?.classList.toggle('rotate-180');
  });
  
  // Customization panel functionality
  const saveButton = document.getElementById('save-preferences');
  const categoryToggles = document.querySelectorAll('.category-toggle');
  const articlesPerSection = document.getElementById('articles-per-section') as HTMLSelectElement;
  
  saveButton?.addEventListener('click', () => {
    // Get selected categories
    const selectedCategories = Array.from(categoryToggles)
      .filter(cb => (cb as HTMLInputElement).checked)
      .map(cb => (cb as HTMLElement).dataset.category);
    
    // Hide/show sections based on selected categories
    document.querySelectorAll('section').forEach(section => {
      const sectionId = section.id;
      const categoryItem = categories.find(cat => cat.slug === sectionId);
      
      if (categoryItem && selectedCategories.includes(categoryItem.id)) {
        section.classList.remove('hidden');
      } else if (categoryItem) {
        section.classList.add('hidden');
      }
    });

    // Update number of articles shown
    const articlesCount = parseInt(articlesPerSection.value);
    document.querySelectorAll('.grid').forEach(grid => {
      const articles = grid.querySelectorAll('div[class^="bg-white"]');
      articles.forEach((article, index) => {
        if (index < articlesCount) {
          article.classList.remove('hidden');
        } else {
          article.classList.add('hidden');
        }
      });
    });
    
    // Show success message
    const notification = document.createElement('div');
    notification.className = 'fixed bottom-4 right-4 bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded-lg shadow-lg transition-opacity duration-500';
    notification.innerHTML = '<div class="flex items-center"><svg class="h-5 w-5 mr-2 text-green-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" /></svg>Preferences saved successfully!</div>';
    
    document.body.appendChild(notification);
    
    // Remove notification after 3 seconds
    setTimeout(() => {
      notification.style.opacity = '0';
      setTimeout(() => notification.remove(), 500);
    }, 3000);
    
    // Close panel after saving
    customizePanel?.classList.add('hidden');
    toggleIcon?.classList.remove('rotate-180');
  });

  // View toggle functionality
  const categoryViewBtn = document.getElementById('category-view');
  const sourceViewBtn = document.getElementById('source-view');
  const categoryContent = document.getElementById('category-content');
  const sourceContent = document.getElementById('source-content');
  
  // Set default articles per view
  let articlesPerCategory = 3;
  let articlesPerSource = 5;
  
  // Toggle between category and source views
  categoryViewBtn?.addEventListener('click', () => {
    categoryViewBtn.classList.add('bg-purple-100', 'text-purple-800');
    sourceViewBtn?.classList.remove('bg-purple-100', 'text-purple-800');
    
    categoryContent?.classList.remove('hidden');
    sourceContent?.classList.add('hidden');
  });
  
  sourceViewBtn?.addEventListener('click', () => {
    sourceViewBtn.classList.add('bg-purple-100', 'text-purple-800');
    categoryViewBtn?.classList.remove('bg-purple-100', 'text-purple-800');
    
    sourceContent?.classList.remove('hidden');
    categoryContent?.classList.add('hidden');
  });

  // Define categories for script access
  const categories = [
    { id: 'FemTech News & Innovation', name: 'FemTech News & Innovation', slug: 'femtech-news-innovation' },
    { id: 'Reproductive & Maternal Health', name: 'Reproductive & Maternal Health', slug: 'reproductive-maternal-health' },
    { id: 'Women\'s Health & Wellness', name: 'Women\'s Health & Wellness', slug: 'womens-health-wellness' },
    { id: 'Women in Tech & Leadership', name: 'Women in Tech & Leadership', slug: 'women-in-tech-leadership' },
    { id: 'Career & Professional Development', name: 'Career & Professional Development', slug: 'career-professional-development' },
    { id: 'Tech Education & Skills', name: 'Tech Education & Skills', slug: 'tech-education-skills' }
  ];
</script>
