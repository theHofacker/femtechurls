---
import BaseLayout from '../layouts/BaseLayout.astro';
import NewsCard from '../components/NewsCard.astro';
import SkeletonCard from '../components/SkeletonCard.astro';
import { fetchNews } from '../utils/feedAggregator';

// Fetch all news items with improved error handling
let news;
try {
  news = await fetchNews();
  
  // If there's no news (empty array), use some fallbacks
  if (!news || news.length === 0) {
    console.warn('No news items returned from fetchNews, using sample data');
    // Import sample data directly
    const { sampleNewsItems } = await import('../utils/feedAggregator');
    news = sampleNewsItems;
  }
} catch (error) {
  console.error('Error fetching news:', error);
  // Import sample data directly
  const { sampleNewsItems } = await import('../utils/feedAggregator');
  news = sampleNewsItems;
}

// Group news by source
const groupedBySource = news.reduce((acc, item) => {
  if (!acc[item.sourceName]) {
    acc[item.sourceName] = [];
  }
  acc[item.sourceName].push(item);
  return acc;
}, {} as Record<string, typeof news>);

// Sort sources alphabetically for consistent display
const sources = Object.keys(groupedBySource).sort();

// Initial number of cards to display per source
const initialCardsToShow = 6;
---

<BaseLayout title="FemTechURLs">
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-2">Latest in FemTech News</h1>
    <p class="text-gray-600">A curated collection of the latest news and innovations in women's health technology.</p>
  </div>

  {sources.length > 0 ? (
    <div class="space-y-12">
      {sources.map(source => {
        const sourceNews = groupedBySource[source];
        const hasMoreItems = sourceNews.length > initialCardsToShow;
        
        return (
          <section class="source-section" data-source={source}>
            <h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center">
              <span>{source}</span>
              <span class="ml-3 text-sm bg-purple-50 text-purple-700 px-2.5 py-0.5 rounded-full">
                {sourceNews.length} {sourceNews.length === 1 ? 'article' : 'articles'}
              </span>
            </h2>
            <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3 source-news-grid">
              {sourceNews
                .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()) // Sort by date, newest first
                .map((item, index) => (
                  <div class={`news-card-container ${index >= initialCardsToShow ? 'hidden' : ''}`}>
                    <NewsCard
                      title={item.title}
                      description={item.description}
                      link={item.link}
                      date={item.date}
                      source={item.sourceName}
                      image={item.image}
                      category="FemTech News & Innovation"
                    />
                  </div>
                ))
              }
            </div>
            
            {hasMoreItems && (
              <div class="mt-8 text-center">
                <button 
                  class="load-more-btn px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 transition-colors"
                  data-source={source}
                >
                  Load More
                </button>
              </div>
            )}
          </section>
        );
      })}
    </div>
  ) : (
    <div class="text-center py-16">
      <div class="text-gray-500 mb-6">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z" />
        </svg>
        <h2 class="text-xl font-medium mt-4">No news available</h2>
        <p class="mt-2">Please check back later for updates</p>
      </div>
      <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
        <SkeletonCard />
        <SkeletonCard />
        <SkeletonCard />
      </div>
    </div>
  )}

  <!-- Newsletter subscription box -->
<div class="bg-gray-50 border border-gray-200 rounded-lg p-6 my-12" id="newsletter-container">
  <div class="flex flex-col md:flex-row items-center">
    <div class="md:w-2/3 mb-6 md:mb-0">
      <h3 class="text-xl font-bold text-gray-900 mb-2">Stay Updated on FemTech News</h3>
      <p class="text-gray-600">Subscribe to our newsletter to receive the latest women's health technology news and innovations directly in your inbox.</p>
    </div>
    <div class="md:w-1/3 w-full">
      <form name="newsletter" method="POST" data-netlify="true" id="newsletter-form" class="w-full">
        <input type="hidden" name="form-name" value="newsletter" />
        <div class="flex">
          <input 
            type="email" 
            name="email"
            placeholder="Your email" 
            required
            class="flex-1 px-4 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
          />
          <button 
            type="submit"
            class="px-4 py-2 bg-purple-600 text-white rounded-r-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2">
            Subscribe
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Thank you message (hidden by default) -->
<div id="thank-you-message" class="hidden bg-green-50 border border-green-200 rounded-lg p-6 my-12 text-center">
  <svg class="h-12 w-12 text-green-500 mx-auto mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
  </svg>
  <h3 class="text-xl font-bold text-gray-900 mb-2">Thank You for Subscribing!</h3>
  <p class="text-gray-600">You've successfully signed up for our newsletter. We'll keep you updated with the latest in FemTech news.</p>
</div>

<script>
  // Handle form submission and thank you message
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('newsletter-form');
    const container = document.getElementById('newsletter-container');
    const thankYouMessage = document.getElementById('thank-you-message');
    
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        try {
          const formData = new FormData(form);
          
          // Submit the form to Netlify
          await fetch('/', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams(formData).toString()
          });
          
          // Show thank you message
          if (container && thankYouMessage) {
            container.classList.add('hidden');
            thankYouMessage.classList.remove('hidden');
            
            // Optional: Hide thank you message after some time
            setTimeout(() => {
              container.classList.remove('hidden');
              thankYouMessage.classList.add('hidden');
              form.reset(); // Clear the form
            }, 5000); // Show for 5 seconds
          }
        } catch (error) {
          console.error('Error submitting form:', error);
          alert('There was an error submitting the form. Please try again.');
        }
      });
    }
    
    // Check for success parameter in URL (alternative approach)
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('success') === 'true') {
      if (container && thankYouMessage) {
        container.classList.add('hidden');
        thankYouMessage.classList.remove('hidden');
      }
    }
  });
</script>
</BaseLayout>

<script>
  // Handle Load More functionality
  document.addEventListener('DOMContentLoaded', () => {
    const loadMoreButtons = document.querySelectorAll('.load-more-btn');
    
    loadMoreButtons.forEach(button => {
      if (button instanceof HTMLElement) {
        const sourceName = button.getAttribute('data-source');
        let currentlyShown = 6; // Start with initial cards already shown
        const increment = 6; // How many more to show each time
        
        button.addEventListener('click', () => {
          const section = button.closest('.source-section');
          if (!section) return;
          
          const hiddenCards = section.querySelectorAll('.news-card-container.hidden:not(.search-hidden)');
          const cardsToShow = Array.from(hiddenCards).slice(0, increment);
          
          // Show the next batch of cards
          cardsToShow.forEach(card => {
            card.classList.remove('hidden');
          });
          
          // Update counter
          currentlyShown += cardsToShow.length;
          
          // Hide the button if no more cards to show
          if (hiddenCards.length <= increment) {
            button.classList.add('hidden');
          }
          
          // Update button text to show count
          const totalCards = section.querySelectorAll('.news-card-container').length;
          button.textContent = `Showing ${currentlyShown} of ${totalCards} - Load More`;
        });
      }
    });
    
    // Handle search functionality
    const searchInput = document.getElementById('global-search-input');
    
    function handleSearch(value) {
      const articles = document.querySelectorAll('.news-card-container');
      const sections = document.querySelectorAll('.source-section');
      value = value.toLowerCase().trim();
      
      // Reset visibility first (only for search filtering)
      articles.forEach(article => {
        article.classList.remove('search-hidden');
      });
      
      if (value === '') return; // No search term, no filtering
      
      sections.forEach(section => {
        let hasVisibleArticles = false;
        const sectionArticles = section.querySelectorAll('.news-card-container:not(.hidden)');
        
        sectionArticles.forEach(article => {
          const card = article.querySelector('.bg-white');
          if (!card) return;
          
          const title = card.querySelector('h3')?.textContent?.toLowerCase() || '';
          const description = card.querySelector('p')?.textContent?.toLowerCase() || '';
          
          if (title.includes(value) || description.includes(value)) {
            hasVisibleArticles = true;
          } else {
            article.classList.add('search-hidden');
          }
        });
        
        // Show/hide the section based on matching articles
        if (hasVisibleArticles) {
          section.classList.remove('hidden');
        } else {
          section.classList.add('hidden');
        }
      });
    }
    
    searchInput?.addEventListener('input', (e) => {
      if (e.target instanceof HTMLInputElement) {
        handleSearch(e.target.value);
      }
    });
  });
</script>

<style>
  .search-hidden {
    display: none;
  }
</style>
