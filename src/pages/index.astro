---
import BaseLayout from '../layouts/BaseLayout.astro';
import NewsCard from '../components/NewsCard.astro';
import SkeletonCard from '../components/SkeletonCard.astro';
import { fetchNews } from '../utils/feedAggregator';

// Fetch all news items with improved error handling
let news;
try {
  news = await fetchNews();
  
  // If there's no news (empty array), use some fallbacks
  if (!news || news.length === 0) {
    console.warn('No news items returned from fetchNews, using sample data');
    // Import sample data directly
    const { sampleNewsItems } = await import('../utils/feedAggregator');
    news = sampleNewsItems;
  }
} catch (error) {
  console.error('Error fetching news:', error);
  // Import sample data directly
  const { sampleNewsItems } = await import('../utils/feedAggregator');
  news = sampleNewsItems;
}

// Group news by category
const groupedByCategory = news.reduce((acc, item) => {
  if (!acc[item.category]) {
    acc[item.category] = [];
  }
  acc[item.category].push(item);
  return acc;
}, {} as Record<string, typeof news>);

// Group news by source
const groupedBySource = news.reduce((acc, item) => {
  if (!acc[item.sourceName]) {
    acc[item.sourceName] = [];
  }
  acc[item.sourceName].push(item);
  return acc;
}, {} as Record<string, typeof news>);

// Updated categories to display
const categories = [
  { id: 'FemTech News & Innovation', name: 'FemTech News & Innovation', slug: 'femtech-news-innovation' },
  { id: 'Reproductive & Maternal Health', name: 'Reproductive & Maternal Health', slug: 'reproductive-maternal-health' },
  { id: 'Women\'s Health & Wellness', name: 'Women\'s Health & Wellness', slug: 'womens-health-wellness' }
];

// Default number of articles to show per section
const articlesPerCategory = 9;
const articlesPerSource = 6;

// Find a featured article (most recent from FemTech News & Innovation)
const featuredNews = groupedByCategory['FemTech News & Innovation'] || [];
const featuredArticle = featuredNews.length > 0 ? featuredNews[0] : (news.length > 0 ? news[0] : null);
---

<BaseLayout title="FemTechURLs">
  <!-- Quick category navigation chips -->
  <div class="flex flex-wrap gap-2 mb-8 overflow-x-auto pb-2">
    {categories.map(category => (
      <a 
        href={`/${category.slug}`} 
        class="inline-flex items-center px-4 py-1.5 bg-purple-100 hover:bg-purple-200 text-purple-800 rounded-full text-sm font-medium whitespace-nowrap"
      >
        {category.name}
      </a>
    ))}
  </div>

  <div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-2">Latest in FemTech & Women's Health</h1>
    <p class="text-gray-600">Your curated source for women's health technology, innovations, and resources.</p>
  </div>

  <div class="flex justify-end mb-6">
    <div class="bg-white border border-gray-200 rounded-lg inline-flex">
      <button 
        id="category-view" 
        class="px-4 py-2 text-sm font-medium rounded-l-lg text-gray-700 hover:bg-gray-50 focus:outline-none"
      >
        Group by Category
      </button>
      <button 
        id="source-view" 
        class="px-4 py-2 text-sm font-medium rounded-r-lg bg-purple-100 text-purple-800 focus:outline-none"
      >
        Group by Source
      </button>
    </div>
  </div>

  <!-- Category-based view (hidden by default) -->
  <div id="category-content" class="space-y-12 hidden">
    {categories.map(category => {
      const categoryNews = groupedByCategory[category.id] || [];
      return categoryNews.length > 0 ? (
        <section id={category.slug} class="article-section">
          <div class="flex items-center justify-between mb-6">
            <h2 class="text-2xl font-bold text-gray-900">{category.name}</h2>
            <a 
              href={`/${category.slug}`}
              class="text-purple-700 hover:text-purple-900 font-medium flex items-center"
            >
              View All
              <svg class="ml-1 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </a>
          </div>
          <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3 article-grid">
            {categoryNews
              /* Sort by date, newest first */
              .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
              /* Take the specified number of articles */
              .slice(0, articlesPerCategory)
              /* Map each item to a NewsCard component */
              .map(item => (
                <NewsCard
                  title={item.title}
                  description={item.description}
                  link={item.link}
                  date={item.date}
                  source={item.sourceName}
                  class="article-card"
                />
              ))
            }
          </div>
        </section>
      ) : null;
    })}
  </div>

  <!-- Source-based view (shown by default) -->
  <div id="source-content" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    {Object.keys(groupedBySource).sort().map((sourceName) => (
      <div class="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow overflow-hidden source-card" data-source={sourceName}>
        <div class="px-4 py-3 bg-gradient-to-r from-purple-600 to-purple-500 border-b border-purple-700">
          <h2 class="text-lg font-bold text-white flex items-center">
            {sourceName}
            <span class="ml-auto text-xs bg-white bg-opacity-20 text-white px-2 py-0.5 rounded-full">
              {groupedBySource[sourceName].length} articles
            </span>
          </h2>
        </div>
        
        <div class="divide-y divide-gray-100 article-grid max-h-[500px] overflow-auto">
          {groupedBySource[sourceName]
            .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
            .slice(0, articlesPerSource)
            .map((item, index) => (
              <div class={`p-4 hover:bg-purple-50 transition-colors article-card`}>
                <a href={item.link} target="_blank" rel="noopener" class="block">
                  <div class="flex items-center text-xs text-gray-500 mb-1.5">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    {typeof item.date === 'string' 
                      ? new Date(item.date).toLocaleDateString() 
                      : item.date.toLocaleDateString()}
                  </div>
                  <h3 class="text-base font-medium text-gray-900 mb-1.5 line-clamp-2 hover:text-purple-700 transition-colors">{item.title}</h3>
                  <p class="text-sm text-gray-600 line-clamp-2">{item.description}</p>
                </a>
              </div>
            ))}
        </div>
      </div>
    ))}
  </div>

  {Object.keys(groupedByCategory).length === 0 && Object.keys(groupedBySource).length === 0 && (
    <div class="text-center py-16">
      <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
        <SkeletonCard />
        <SkeletonCard />
        <SkeletonCard />
      </div>
    </div>
  )}

  <!-- Newsletter subscription box -->
  <div class="bg-gray-50 border border-gray-200 rounded-lg p-6 my-12">
    <div class="flex flex-col md:flex-row items-center">
      <div class="md:w-2/3 mb-6 md:mb-0">
        <h3 class="text-xl font-bold text-gray-900 mb-2">Stay Updated on FemTech News</h3>
        <p class="text-gray-600">Subscribe to our newsletter to receive the latest women's health technology news and innovations directly in your inbox.</p>
      </div>
      <div class="md:w-1/3 w-full">
        <div class="flex">
          <input 
            type="email" 
            placeholder="Your email" 
            class="flex-1 px-4 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
          />
          <button class="px-4 py-2 bg-purple-600 text-white rounded-r-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2">
            Subscribe
          </button>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  /* Add these styles to your component for smoother scrolling */
  .article-grid {
    scrollbar-width: thin;
    scrollbar-color: rgba(139, 92, 246, 0.3) rgba(243, 244, 246, 1);
  }
  
  .article-grid::-webkit-scrollbar {
    width: 6px;
  }
  
  .article-grid::-webkit-scrollbar-track {
    background: rgba(243, 244, 246, 1);
  }
  
  .article-grid::-webkit-scrollbar-thumb {
    background-color: rgba(139, 92, 246, 0.3);
    border-radius: 3px;
  }
</style>

<script>
  // DOM Elements
  const categoryViewBtn = document.getElementById('category-view');
  const sourceViewBtn = document.getElementById('source-view');
  const categoryContent = document.getElementById('category-content');
  const sourceContent = document.getElementById('source-content');
  
  // Toggle between category and source views
  function setViewMode(isSourceView) {
    // Save the preference
    localStorage.setItem('preferredView', isSourceView ? 'source' : 'category');
    
    if (isSourceView) {
      sourceViewBtn.classList.add('bg-purple-100', 'text-purple-800');
      categoryViewBtn.classList.remove('bg-purple-100', 'text-purple-800');
      categoryViewBtn.classList.add('text-gray-700', 'hover:bg-gray-50');
      
      sourceContent.classList.remove('hidden');
      categoryContent.classList.add('hidden');
    } else {
      categoryViewBtn.classList.add('bg-purple-100', 'text-purple-800');
      sourceViewBtn.classList.remove('bg-purple-100', 'text-purple-800');
      sourceViewBtn.classList.add('text-gray-700', 'hover:bg-gray-50');
      
      categoryContent.classList.remove('hidden');
      sourceContent.classList.add('hidden');
    }
  }
  
  categoryViewBtn?.addEventListener('click', () => setViewMode(false));
  sourceViewBtn?.addEventListener('click', () => setViewMode(true));
  
  // Initialize view based on saved preference or default to source view
  document.addEventListener('DOMContentLoaded', () => {
    const preferredView = localStorage.getItem('preferredView') || 'source'; // Default to source view
    setViewMode(preferredView === 'source');
    
    // Handle search functionality
    const searchInput = document.getElementById('search-input');
    
    function handleSearch(value) {
      const articles = document.querySelectorAll('.article-card');
      const sections = document.querySelectorAll('.article-section');
      const sourceCards = document.querySelectorAll('.source-card');
      value = value.toLowerCase().trim();
      
      // Handle category view
      sections.forEach(section => {
        let hasVisibleArticles = false;
        const sectionArticles = section.querySelectorAll('.article-card');
        
        sectionArticles.forEach(article => {
          const title = article.querySelector('h3')?.textContent?.toLowerCase() || '';
          const description = article.querySelector('p')?.textContent?.toLowerCase() || '';
          
          if (title.includes(value) || description.includes(value)) {
            article.classList.remove('hidden');
            hasVisibleArticles = true;
          } else {
            article.classList.add('hidden');
          }
        });
        
        if (hasVisibleArticles) {
          section.classList.remove('hidden');
        } else {
          section.classList.add('hidden');
        }
      });
      
      // Handle source view
      sourceCards.forEach(card => {
        let hasVisibleArticles = false;
        const sourceArticles = card.querySelectorAll('.article-card');
        
        sourceArticles.forEach(article => {
          const title = article.querySelector('h3')?.textContent?.toLowerCase() || '';
          const description = article.querySelector('p')?.textContent?.toLowerCase() || '';
          
          if (title.includes(value) || description.includes(value)) {
            article.classList.remove('hidden');
            hasVisibleArticles = true;
          } else {
            article.classList.add('hidden');
          }
        });
        
        if (hasVisibleArticles) {
          card.classList.remove('hidden');
        } else {
          card.classList.add('hidden');
        }
      });
